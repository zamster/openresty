# OpenResty 

daemon off;
worker_processes 4;
error_log /dev/stdout debug;

events {
	worker_connections 1024;
}

http {
	access_log /dev/stdout;

	lua_package_path '${prefix}/src/?.lua;${prefix}/lib/?.lua;;';

    # diable on production
    # lua_code_cache off;

	server {
		listen 8080;
        resolver 8.8.8.8;

        location /index {
            content_by_lua_file src/index.lua;
        }

        location /baidu {
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri("http://www.asd.com")
                if res.status == ngx.HTTP_OK then
                    ngx.say(res.body)
                else
                    ngx.exit(res.status)
                end
            }
        }

        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  src/access_check.lua;

            #内容生成阶段
            content_by_lua_file src/$1.lua;
        }

		location /mixed {
			set_by_lua_block $a {
				ngx.log(ngx.ERR, "set_by_lua*")
			}
			rewrite_by_lua_block {
				ngx.log(ngx.ERR, "rewrite_by_lua*")
			}
			access_by_lua_block {
				ngx.log(ngx.ERR, "access_by_lua*")
			}
			content_by_lua_block {
				ngx.log(ngx.ERR, "content_by_lua*")
			}
			header_filter_by_lua_block {
				ngx.log(ngx.ERR, "header_filter_by_lua*")
			}
			body_filter_by_lua_block {
				ngx.log(ngx.ERR, "body_filter_by_lua*")
			}
			log_by_lua_block {
				ngx.log(ngx.ERR, "log_by_lua*")
			}
		}
	}
}